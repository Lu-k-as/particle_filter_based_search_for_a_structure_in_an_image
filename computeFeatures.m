% (2) Implement a function computeFeatures(image) that returns a% nfeaturesxnpixels dimensional feature matrix of an image, including the% following features: grey value of an image, gradient in x- and y-% direction, magnitude of the gradient, Haar-like features of gray value% image using the function computeHaarLike.m, Haar-like features of the% gradient magnitudes, x- and y-coordinates of a pixelfunction featuresMatrix=computeFeatures(image)% Creation of the matrix with the features required % (number of features = number of rows; total number of pixels = number of% columns)featuresMatrix = zeros(8,size(image,1)*size(image,2));% First feature: grey valuefeaturesMatrix (1,:) = reshape(image,1,size(image,1) * size(image,2));% Second and third features: x-gradient and y-gradient[xGradient,yGradient] = gradient(double(image));featuresMatrix (2,:) = reshape(xGradient,1,size(image,1) * size(image,2));featuresMatrix (3,:) = reshape(yGradient,1,size(image,1) * size(image,2));% Fourth feature: magnitude of the gradient (i.e. maximum between % x-gradient value and y-gradient value)magnitudeGradientMatrix = max(xGradient,yGradient);featuresMatrix(4,:) = reshape(magnitudeGradientMatrix,1,size(image,1) * size(image,2));% Fifth: Haar-Like feature of image's grey valuesimageHaarLike = computeHaarLike(image);featuresMatrix(5,:) = reshape (imageHaarLike(1,:),1,size(image,1) * size(image,2));% Sixth features : Haar-Like feature of gradient's magnitudegradientHaarLike = computeHaarLike(magnitudeGradientMatrix);featuresMatrix (6,:) = reshape (gradientHaarLike(1,:),1,size(image,1) * size(image,2));% Seventh and eighth features: x-coordinate and y-coordinate of each pixelfeaturesMatrix(7,:) = repmat(1:size(image,2),1,size(image,1));yCoordinates = repmat(1:size(image,1),size(image,2),1);featuresMatrix(8,:) = reshape(yCoordinates,1,size(image,1) * size(image,2));end